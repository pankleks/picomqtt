const t=require("net"),{EventEmitter:e}=require("events"),i=1,n=2,c=3,r=8,s=10,h=12,o=14;class l extends e{constructor(t,e={}){super(),this._url=t,this._port=e.port||1883,this._keepAliveS=e.keepAliveS||60,this._user=e.user,this._password=e.password,this._reconnectS=e.reconnectS||20,this._tcpConnected=!1,this._client=null,this._reconnectT=null,this._heartbeatT=null,this._clientId=e.clientId||"picoMQTT"}static encodeString(t){return String.fromCharCode(t.length>>8,255&t.length)+t}static buildPacket(t,e,i){return String.fromCharCode(t,e.length+i.length)+e+i}buildConnectPacket(){let t=2,e=l.encodeString(this._clientId);return this._user&&this._password&&(t|=192,e+=l.encodeString(this._user)+l.encodeString(this._password)),l.buildPacket(i<<4,l.encodeString("MQTT")+String.fromCharCode(4,t,this._keepAliveS>>8,255&this._keepAliveS),e)}handleData(t){switch(t[0]>>4){case n:0!=t[3]?this.emit("error",new Error("connection rejected")):this.emit("connected");break;case c:const e=new TextDecoder,i=t[1],r=t[2]<<8|t[3],s=e.decode(t.slice(4,4+r)),h=e.decode(t.slice(4+r,2+i));this.emit("message",{topic:s,message:h}),t.length>i+2&&this.handleData(t.slice(i+2))}}cleanup(t){this._tcpConnected=!1,this._heartbeatT&&(clearInterval(this._heartbeatT),this._heartbeatT=null),this._reconnectT&&(clearTimeout(this._reconnectT),this._reconnectT=null),this._client&&(this._client.removeAllListeners(),this._client.end(),this._client=null),this.emit("disconnected",t),t&&(this._reconnectT=setTimeout(this.connect.bind(this),1e3*this._reconnectS))}connect(){try{this._client=t.createConnection({host:this._url,port:this._port},(()=>{this._tcpConnected=!0,this._client.write(this.buildConnectPacket()),this._heartbeatT=setInterval((()=>{if(this._tcpConnected)try{this._client.write(String.fromCharCode(h<<4,0))}catch{this.cleanup(!0)}}),1e3*(this._keepAliveS-5))})),this._client.on("data",this.handleData.bind(this)),this._client.on("end",this.cleanup.bind(this,!1)),this._client.on("error",(t=>{this.emit("error",t),this.cleanup(!0)}))}catch(t){this.emit("error",t),this.cleanup(!0)}}subscribe(t){this._tcpConnected&&this._client.write(l.buildPacket(r<<4|2,String.fromCharCode(256,1),l.encodeString(t)+String.fromCharCode(0)))}unsubscribe(t){this._tcpConnected&&this._client.write(l.buildPacket(s<<4|2,String.fromCharCode(256,1),l.encodeString(t)))}publish(t,e){if(t.length+e.length>127)throw new Error("too long");this._tcpConnected&&this._client.write(l.buildPacket(c<<4,l.encodeString(t),e))}disconnect(){if(this._tcpConnected)try{this._client.write(String.fromCharCode(o<<4,0))}catch{}this.cleanup(!1)}}exports.PicoMQTT=l;